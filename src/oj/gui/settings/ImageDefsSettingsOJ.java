/**
 * Linked Images Panel within Project window
 *
 */
package oj.gui.settings;

import ij.IJ;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.dnd.DropTarget;
import java.io.File;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.SwingConstants;
import javax.swing.border.Border;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.border.LineBorder;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.TableColumnModelEvent;
import javax.swing.event.TableColumnModelListener;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import oj.OJ;
import oj.util.UtilsOJ;
import oj.project.ImageOJ;
import oj.graphics.RoundPanelOJ;
import oj.io.OpenDialogOJ;
import oj.plugin.SimpleCommandsOJ;
import oj.processor.ImageProcessorOJ;
import oj.processor.events.CellChangedEventOJ;
import oj.processor.events.CellChangedListenerOJ;
import oj.processor.events.ImageChangedEventOJ;
import oj.processor.events.ImageChangedListener2OJ;
import oj.processor.events.YtemDefChangedEventOJ;
import oj.processor.events.YtemDefChangedListenerOJ;
import oj.project.DataOJ;
import oj.project.ImagesOJ;

/**
 *
 * Panel that holds the table of linked images
 */
public class ImageDefsSettingsOJ extends javax.swing.JPanel implements TableColumnModelListener, IControlPanelOJ, ImageChangedListener2OJ, YtemDefChangedListenerOJ, CellChangedListenerOJ {
    
    private ImageDefsHeaderRenderer imageDefsHeaderRenderer = new ImageDefsHeaderRenderer();
    private ImageDefsTableRenderer imageDefsTableRenderer = new ImageDefsTableRenderer();
    private Dimension panelSize = new Dimension(600, 298);

    /**
     * Creates new form ImageDefsSettings
     */
    public ImageDefsSettingsOJ() {
        initComponents();
        initExtComponents();
        
        OJ.getEventProcessor().addCellChangedListener(this);
        OJ.getEventProcessor().addImageChangedListener(this);
    }

    /**
     * remove listeners before closing
     */
    public void close() {
        OJ.getEventProcessor().removeCellChangedListener(this);
        OJ.getEventProcessor().removeImageChangedListener(this);
    }

    /**
     * Initialises the "images" table and enables drag+drop
     */
    private void initExtComponents() {
        tblImageDefs.setEnabled(true);
        tblImageDefs.getTableHeader().setOpaque(false);
        tblImageDefs.getTableHeader().setDefaultRenderer(imageDefsHeaderRenderer);
        
        tblImageDefs.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

//        new DropTarget(tblImageDefs, ImageDnDOJ.dropOperations, ImageDnDOJ.getInstance());
//        new DropTarget(jScrollPane1, ImageDnDOJ.dropOperations, ImageDnDOJ.getInstance());
        new DropTarget(tblImageDefs, ImageProcessorOJ.dropOperations, OJ.getImageProcessor());
        new DropTarget(jScrollPane1, ImageProcessorOJ.dropOperations, OJ.getImageProcessor());
        
        chkShowObjectLayer.setSelected(OJ.getData().getYtemDefs().isCellLayerVisible());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        chkShowObjectLayer = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new RoundPanelOJ();
        jPanel8 = new javax.swing.JPanel();
        btnLinkImage = new javax.swing.JButton();
        btnUnlinkImage = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblImageDefs = new javax.swing.JTable();
        tblImageDefs.getColumnModel().addColumnModelListener(this);

        setLayout(new java.awt.BorderLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 22, 5, 5));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        chkShowObjectLayer.setMaximumSize(new java.awt.Dimension(50, 23));
        chkShowObjectLayer.setMinimumSize(new java.awt.Dimension(50, 23));
        chkShowObjectLayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkShowObjectLayerActionPerformed(evt);
            }
        });
        jPanel1.add(chkShowObjectLayer, new java.awt.GridBagConstraints());

        jLabel1.setText("Show Object Layer");
        jPanel1.add(jLabel1, new java.awt.GridBagConstraints());

        add(jPanel1, java.awt.BorderLayout.NORTH);

        jPanel3.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 16, 20, 16));
        jPanel3.setOpaque(false);
        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel4.setBorder(javax.swing.BorderFactory.createEmptyBorder(4, 4, 4, 4));
        jPanel4.setOpaque(false);
        jPanel4.setLayout(new java.awt.BorderLayout());

        jPanel8.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 10, 10, 1));
        jPanel8.setLayout(new javax.swing.BoxLayout(jPanel8, javax.swing.BoxLayout.LINE_AXIS));

        btnLinkImage.setText("Link...");
        btnLinkImage.setFocusPainted(false);
        btnLinkImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLinkImageActionPerformed(evt);
            }
        });
        jPanel8.add(btnLinkImage);

        btnUnlinkImage.setText("Unlink");
        btnUnlinkImage.setEnabled(false);
        btnUnlinkImage.setFocusPainted(false);
        btnUnlinkImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUnlinkImageActionPerformed(evt);
            }
        });
        jPanel8.add(btnUnlinkImage);

        jPanel4.add(jPanel8, java.awt.BorderLayout.PAGE_END);

        jPanel7.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        jPanel7.setOpaque(false);
        jPanel7.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setOpaque(false);
        jScrollPane1.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jScrollPane1AncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        tblImageDefs.setModel(new ImageDefsTableModel());
        tblImageDefs.setFocusable(false);
        tblImageDefs.setGridColor(new java.awt.Color(204, 204, 204));
        tblImageDefs.setOpaque(false);
        tblImageDefs.setRowHeight(19);
        tblImageDefs.setShowHorizontalLines(false);
        tblImageDefs.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tblImageDefsMousePressed(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblImageDefsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblImageDefs);

        jPanel7.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel4.add(jPanel7, java.awt.BorderLayout.CENTER);

        jPanel3.add(jPanel4, java.awt.BorderLayout.CENTER);

        add(jPanel3, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

private void chkShowObjectLayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkShowObjectLayerActionPerformed
    OJ.getData().getYtemDefs().setCellLayerVisible(chkShowObjectLayer.isSelected());
    OJ.getEventProcessor().fireYtemDefChangedEvent(YtemDefChangedEventOJ.YTEM_LAYER_VISIBILITY_CHANGED);
}//GEN-LAST:event_chkShowObjectLayerActionPerformed

private void btnLinkImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLinkImageActionPerformed
    OpenDialogOJ ooj = new OpenDialogOJ("Link Image", OJ.getData().getDirectory());
    if (ooj.isApproved()) {
        
        String fName = ooj.getFilename();
        boolean good = false;
        String[] goodExt = ".tiff .tif .jpg .png .gif".split(" ");
        for (int jj = 0; jj < goodExt.length; jj++) {
            if (fName.toLowerCase().endsWith(goodExt[jj])) {
                good = true;
            }
        }
        if (good) {
            try {
                OJ.getImageProcessor().addImage(ooj.getFilename(), false, true);
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {
            IJ.beep();
            IJ.showStatus("File is not an image");
        }
    }
}//GEN-LAST:event_btnLinkImageActionPerformed

private void btnUnlinkImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUnlinkImageActionPerformed
    int[] indexes = tblImageDefs.getSelectedRows();
    for (int jj = indexes.length - 1; jj >= 0; jj--) {
        int index = indexes[jj];
        ImageOJ imj = OJ.getData().getImages().getImageByIndex(index);
        if (imj != null) {
            OJ.getData().getImages().removeImageByName(imj.getName());
        }
    }
}//GEN-LAST:event_btnUnlinkImageActionPerformed

private void tblImageDefsMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblImageDefsMousePressed
    int index = tblImageDefs.getSelectedRow();
    if (index >= OJ.getData().getImages().getImagesCount()) {
        btnUnlinkImage.setEnabled(false);
    } else {
        btnUnlinkImage.setEnabled(index >= 0);
    }
}//GEN-LAST:event_tblImageDefsMousePressed

private void jScrollPane1AncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jScrollPane1AncestorAdded
    jScrollPane1.getColumnHeader().setOpaque(false);
}//GEN-LAST:event_jScrollPane1AncestorAdded

private void tblImageDefsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblImageDefsMouseClicked
    int row = tblImageDefs.rowAtPoint(evt.getPoint());//8.2.2014
    int column = tblImageDefs.columnAtPoint(evt.getPoint());
    boolean ctrl = evt.isControlDown();
    ImagesOJ images = OJ.getData().getImages();
    int nImages = images.getImagesCount();
    if (row >= nImages) {
        return;
    }
    if (((evt.getButton() == java.awt.event.MouseEvent.BUTTON1)) && !ctrl && (evt.getClickCount() == 2)) {
        ImageOJ imj = images.getImageByIndex(row);
        if (imj != null) {
            OJ.getImageProcessor().openImage(imj.getName());
        }
    } else if ((evt.getButton() == java.awt.event.MouseEvent.BUTTON3 || ctrl) && (column == 3)) {
        OJ.getImageProcessor().propagateScale(row);
    } else if ((evt.getButton() == java.awt.event.MouseEvent.BUTTON3 || ctrl) && (column == 0)) {//8.2.2014
        ImageOJ img = OJ.getData().getImages().getImageByIndex(row);
        if (img != null) {
            String error = SimpleCommandsOJ.renameImageAndFile(img.getName(), "");
            if (!error.equals("")) {
                IJ.showMessage(error);
            }
        }
    }
}//GEN-LAST:event_tblImageDefsMouseClicked
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLinkImage;
    private javax.swing.JButton btnUnlinkImage;
    private javax.swing.JCheckBox chkShowObjectLayer;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblImageDefs;
    // End of variables declaration//GEN-END:variables

    /**
     * adjust column widths when they are created
     */
    public void columnAdded(TableColumnModelEvent e) {
        int toIndex = e.getToIndex();
        if (e.getSource() == tblImageDefs.getColumnModel()) {
            TableColumn tableCol = (TableColumn) tblImageDefs.getColumnModel().getColumn(toIndex);
            tableCol.setCellRenderer(imageDefsTableRenderer);
            switch (toIndex) {
                case 0://image name
                    tableCol.setWidth(170);
                    tableCol.setPreferredWidth(170);
                    break;
                case 1://# objects
                    tableCol.setWidth(75);
                    tableCol.setPreferredWidth(75);
                    break;
                case 2://stack info
                    tableCol.setWidth(90);
                    tableCol.setPreferredWidth(90);
                    break;
                case 3://scaling
                    tableCol.setWidth(70);
                    tableCol.setPreferredWidth(70);
                    break;
            }
        }
    }
    
    public void columnRemoved(TableColumnModelEvent e) {
    }
    
    public void columnMoved(TableColumnModelEvent e) {
    }
    
    public void columnMarginChanged(ChangeEvent e) {
    }
    
    public void columnSelectionChanged(ListSelectionEvent e) {
    }

    /**
     * called e.g. when the user changed the name of a linked image
     */
    public synchronized void imageChanged(ImageChangedEventOJ evt) {//9.9.2009
        if (evt.getOperation() == ImageChangedEventOJ.IMAGE_EDITED) {
            ((ImageDefsTableModel) tblImageDefs.getModel()).fireTableUpdated();
        } else {
            ((ImageDefsTableModel) tblImageDefs.getModel()).fireTableStructureChanged();
        }
    }

    // three classes to handle the table:
    // ImageDefsHeaderRenderer, ImageDefsTableRenderer, ImageDefsTableModel
    //
    /**
     * Defines how table's header cells will look like
     */
    public class ImageDefsHeaderRenderer extends JLabel implements TableCellRenderer {
        
        private Font fontArialBold = Font.decode("Arial-BOLD-12");
        //private Color headerBackground = oj.OJ.headerBackground;//new Color(0, 0, 55);//17.5.2010 headerBackground = javax.swing.UIManager.getDefaults().getColor("InternalFrame.activeTitleBackground");
        private Border headerBorder = new CompoundBorder(new LineBorder(Color.GRAY, 1, false), new EmptyBorder(2, 8, 2, 8));

        /**
         * value and apprearance that needs to be drawn into a header cell of
         * the table
         */
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            setHorizontalAlignment(SwingConstants.CENTER);
            setBackground(oj.OJ.headerBackground);//.darker().darker());
            setForeground(Color.WHITE);
            setBorder(headerBorder);
            setOpaque(true);
            if (value != null) {
                setText(value.toString());
            } else {
                setText("");
            }
            setHorizontalAlignment(SwingConstants.LEFT);
            setFont(fontArialBold);
            return this;
        }
    }

    /**
     * Defines how table cells will look like
     */
    public class ImageDefsTableRenderer extends JLabel implements TableCellRenderer {
        
        private boolean isSelected;
        private boolean hasFocus;
        private Font fontArial = Font.decode("Arial-12");
        private Color rowBackground = new Color(236, 241, 244);

        /**
         * value and appearance that needs to be drawn into a content cell of
         * the table
         */
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            this.setOpaque(true);
            this.setBorder(new EmptyBorder(1, 8, 1, 8));
            
            if (isSelected) {
                setForeground(Color.WHITE);
                setBackground(table.getSelectionBackground());
            } else {
                setForeground(Color.BLACK);
                if (row % 2 == 0) {
                    setBackground(Color.WHITE);
                } else {
                    setBackground(rowBackground);
                }
            }
            this.isSelected = isSelected;
            this.hasFocus = hasFocus;
            this.setText(((JLabel) value).getText());
            this.setIcon(((JLabel) value).getIcon());
            setHorizontalAlignment(SwingConstants.LEFT);
            setForeground(Color.BLACK);
            setFont(fontArial);
            return this;
        }
    }

    /**
     * For setting and retrieving table data
     */
    private class ImageDefsTableModel extends AbstractTableModel {
        
        public String getColumnName(int col) {
            
            switch (col) {
                case 0:
                    return "Linked Images";
                case 1:
                    return "Objects";
                case 2:
                    return "Stack size";
                case 3:
                    return "px/unit";
            }
            return "";
        }

        /**
         * shows at least 8 rows, even if there are less imgages
         */
        public int getRowCount() {
            DataOJ data = OJ.getData();
            if (data == null) {
                return 8;
            }
            ImagesOJ imgs = data.getImages();
            int count = imgs.getImagesCount();
            return Math.max(8, count);
        }
        
        public int getColumnCount() {
            return 4;
        }

        /**
         * returns value of a table cell in form of a label (which may have
         * green or red icon)
         */
        public Object getValueAt(int rowIndex, int columnIndex) {
            if (OJ.getData() == null) {//14.8.2011
                return null;
            }
            JLabel label = new JLabel();
            ImagesOJ images = OJ.getData().getImages();//+++461
//Exception in thread "AWT-EventQueue-0" java.lang.NullPointerException
//at oj.gui.settings.ImageDefsSettingsOJ$ImageDefsTableModel.getValueAt(ImageDefsSettingsOJ.java:461)

            if (images == null || rowIndex >= images.getImagesCount()) {//27.6.2011
                label.setText("");
                label.setIcon(null);
                return label;
            }
            ImageOJ imj = OJ.getData().getImages().getImageByIndex(rowIndex);
            switch (columnIndex) {
                case 0://image name
                    label.setText(imj.getName());
                    File file = new File(OJ.getData().getDirectory(), imj.getFilename());
                    if (file.exists()) {
                        label.setIcon(new ImageIcon(getClass().getResource(OJ.ICONS + "FileFound.gif")));
                        imj.setFileExists(true);
                    } else {
                        label.setIcon(new ImageIcon(getClass().getResource(OJ.ICONS + "FileNotFound.gif")));
                        imj.setFileExists(false);
                    }
                    break;
                case 1://#objects
                    if (imj.getLastCell() >= 0) {
                        int count = imj.getLastCell() - imj.getFirstCell() + 1;
                        label.setText(Integer.toString(count) + " (" + Integer.toString(imj.getFirstCell() + 1) + " - " + Integer.toString(imj.getLastCell() + 1) + ")");
                    } else {
                        label.setText("0");
                    }
                    label.setIcon(null);
                    break;
                case 2://stack structure
                    if ((imj.getNumberOfChannels() > 1) || (imj.getNumberOfFrames() > 1)) {
                        int stackSize = imj.getNumberOfChannels() * imj.getNumberOfSlices() * imj.getNumberOfFrames();
                        label.setText(Integer.toString(stackSize) + " = " + imj.getNumberOfChannels() + "*" + imj.getNumberOfSlices() + "*" + imj.getNumberOfFrames());
                        label.setIcon(null);
                    } else {
                        label.setText(Integer.toString(imj.getNumberOfSlices()));
                        label.setIcon(null);
                    }
                    break;
                case 3://scaling
                    String unit = imj.getVoxelUnitX();
                    if (unit != null) {
                        if (unit.equals("um")) {
                            unit = IJ.micronSymbol + "m";
                        } else if (unit.equals("A")) {
                            unit = "" + IJ.angstromSymbol;
                        }
                    } else {
                        unit = "";
                    }
                    double pxPerUnit = 0.0;
                    if (imj.getVoxelSizeX() != 0) {
                        pxPerUnit = 1 / imj.getVoxelSizeX();
                    }
                    double tmp = pxPerUnit;
                    int digits = 1;
                    while (tmp < 100) {
                        tmp *= 10;
                        digits++;
                    }
                    if (Double.compare(pxPerUnit, 1.0) == 0) {
                        label.setText("-");
                    } else {
                        label.setText(UtilsOJ.doubleToString(pxPerUnit, digits));
                    }
                    label.setIcon(null);
                    break;
            }
            return label;
        }
        
        public boolean isCellEditable(int row, int col) {
            return false;
        }
        
        public void fireTableUpdated() {
            fireTableRowsUpdated(0, getRowCount());
        }
        
        public void fireTableRowUpdated(int index) {
            fireTableRowsUpdated(index, index);
        }
    }

    /**
     * set "Visible Objects" checkbox
     */
    public synchronized void ytemDefChanged(YtemDefChangedEventOJ evt) {//9.9.2009
        if (evt.getOperation() == YtemDefChangedEventOJ.YTEM_LAYER_VISIBILITY_CHANGED) {
            chkShowObjectLayer.setSelected(OJ.getData().getYtemDefs().isCellLayerVisible());
        }
    }

    /**
     * update #Objects image column
     */
    public synchronized void cellChanged(CellChangedEventOJ evt) {//9.9.2009
        ((ImageDefsTableModel) tblImageDefs.getModel()).fireTableUpdated();
    }
    
    public void ignoreRepaint(boolean flag) {
        tblImageDefs.setIgnoreRepaint(flag);
    }
    
    public Dimension getPanelSize() {
        return panelSize;
    }
    
    public void setPanelSize(Dimension panelSize) {
        this.panelSize = panelSize;
    }
}
